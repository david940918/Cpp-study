C++의 reference

원래 C에서의 reference는
void foo(int *a)이면

foo(&something) 이런 식으로 전달해주었다.

이 경우 a는 something을 참조하는 것이다.

그러나 C++에서는

'참조형'이라는 것이 있어 선언과 동시에 초기화 해줄 때 &를 사용한다.

int value = 5;
int& ref = value;
이렇게 하면 ref는 value를 참조하게 된다. 반드시 선언과 동시에 초기화해야 한다.

	-null은 참조 불가.
	-non-const 값에 대한 참조는 non-const 값으로만 초기화 가능.
	-const 값 또는 value로 초기화 불가.
	-초기화 된 후에는 다른 변수 참조를 위해 변경할 수 없다.

이러한 참조형은 C++에서 함수 매개변수로 많이 사용한다.
C에서 포인터로 원본을 변경하였듯 마찬가지로 가능하다.

참조형의 다른 장점은 네스팅된 데이터에 지름길을 뚫듯 쉽게 접근할 수 있다는 것이다.

구조체 안의 구조체의 데이터 int value1에 접근하고 싶다면,

int& ref = struct1. struct2. value1;
이라고 하면 이후부터는 ref = 5 이런 식으로 수정 가능하다.

객체를 매개변수로 넘길 때 pass by value는 데이터 비용이 크다. copy해야 하므로.
아예 새로운 인스턴스를 함수에 넘기면서 만들게 되는거다.
reference를 사용하도록 하자.

***참고 JAVA에는 pass-by-reference라는 개념이 없다. 모든 것이 pass-by-value이다.
이유인즉슨, 자바에서는 객체를 생성할 때부터 애초에 포인터로 생성된다.
그러므로 함수에 넘길 때도 처음부터 주소로 넘긴다. 주소가 곧 value인 것이다.
그러므로 주소의 주소(value of reference)를 넘길 필요가 없다.
pass-by-reference도 필요없다.

Dog myDog;
Dog myDog = new Dog("Rover");
foo(myDog);

public void foo(Dog someDog) {
    someDog.setName("Max");     // AAA
    someDog = new Dog("Fifi");  // BBB
    someDog.setName("Rowlf");   // CCC
}

main의 강아지는 AAA이다. 이름만 Max로 바뀐다.
하지만 BBB부터는? 다른 강아지이다. 그리고 이 강아지는 함수가 사라지면 사라진다.
----------------------------------------------------------------------------------------------
Function parameter

pass by value 는 값을 넘기는 것.

pass by pointer, more to say 'decay into a pointer' : it loses its type info.

pass by reference, similar to pointer but this is not automatic.

	void do_something(int& x){	// int * x
		x = 11;	// *x = 11;
	}
	int x = 5;
	do_something(x);
-----------------------------------------------------------------------------------------------
Overloading & Overriding

Compiler가 같은 이름의 함수더라도 허가하는 사항이 있다.
다만 이것이 모든 언어에서 용인되는 것은 아니다.

void do_stuff( type ) 이라고 하면 타입이 다른 것은 다른 함수로 본다.
** 주의 : 리턴타입은 함수를 구분하는 signature로 간주하지 않는다. (Overload)

부모 클래스가 가진 method를 상속받아 method를 재정의하는 것(Override)
-----------------------------------------------------------------------------------------------
Multifile Compilation

1) header file(.h)
	#ifndef CUSTOM_H
	#define CUSTOM_H
	
	#endif

** check : 구형 컴파일러는 pragma once를 모른다. 그러므로 범용성을 위해서는
ifndef를 추천한다. 그러나 그게 아니라면 pragma once는 컴파일 동안 오직 한 번만
포함되도록 하므로 파일을 한 번 열고나면 애초에 열려고 시도도 안 한다.
이는 곧 performance로 이어진다.

즉, 범용성? ifndef, 성능? pragma once 이다. 
2) implementation file(.cpp)
3) main file ( 1 + 2 )

이러한 소스파일과 헤더파일을 그대로 분배하는 방법(.cpp)가 있고,
오브젝트 파일(.o)로 분배하는 방법이 있다.
오브젝트 파일은 분배를 하되 내용물을 모르게 하고자 할 때 사용한다.
------------------------------------------------------------------------------------------------
Makefile

purpose : automate the build process for C++

특정 한 개의 파일을 생성했을 때, 전체 프로젝트를 다시 컴파일 할 필요가 없다.
우리가 필요한 것만 재컴파일 하면 된다. 그러고 다시 link하면 된다.

.cpp - 전처리기 - .i - 컴파일러 - .s - 어셈블러 - .o - 링커 - exe

makefile은 컴파일 과정을 나타내는 방법이고, 어느 파일이 어느 파일에 의존하는지 설명한다.
즉 file1.cpp가 바뀌면 file1.o도 다시 컴파일 한다. (file1.o는 file1.cpp에 의존한다.)
a.out은 file1.o에 의존한다. 즉 file1.cpp가 바뀌면 a.out까지 다시 컴파일한다.

<syntax>

makefile(고유명사)

file1.o : file1.cpp 
// file1.o이 file1.cpp에 의존한다.

<example>
#math is ./a.out
math: math_stuff.o math_utils.o
	g++ math_stuff.o math_utils.o -o math

math_stuff.o: math_stuff.cpp
	g++ -c math_stuff.cpp

math_utils.o: math_utils.cpp
	g++ -c math_utils.cpp

clean:
	rm *.o math

만약 math_stuff.cpp가 바뀐다면,
math_stuff.o가 의존 중이므로 아래 명령어가 실행된다.
그리고 math_stuff.o가 바뀐다면,
math가 의존 중이므로 아래 명령어가 실행된다.

굳이 math_utils.cpp까지 다시 컴파일 할 필요가 없는거다.

make clean을 하게되면
.o 파일과 실행파일이 삭제된다.